GAS LISTING /tmp/ccDDt69y.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_Z13dummyFunctionPv
   9              	_Z13dummyFunctionPv:
  10              	.LFB67:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** //
   2:src/main.cpp  **** // Created by marko on 20.4.22..
   3:src/main.cpp  **** //
   4:src/main.cpp  **** 
   5:src/main.cpp  **** #include "../h/tcb.hpp"
   6:src/main.cpp  **** #include "../h/workers.hpp"
   7:src/main.cpp  **** #include "../test/printing.hpp"
   8:src/main.cpp  **** #include "../h/riscv.hpp"
   9:src/main.cpp  **** #include "../h/MemoryAllocator.hpp"
  10:src/main.cpp  **** #include "../lib/hw.h"
  11:src/main.cpp  **** #include "../lib/console.h"
  12:src/main.cpp  **** #include "../h/syscall_c.hpp"
  13:src/main.cpp  **** #include "../h/syscall_cpp.hpp"
  14:src/main.cpp  **** 
  15:src/main.cpp  **** 
  16:src/main.cpp  **** extern void userMain();
  17:src/main.cpp  **** 
  18:src/main.cpp  **** void dummyFunction(void* ) {
  12              		.loc 1 18 28
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  19:src/main.cpp  ****     userMain();
  22              		.loc 1 19 5
  23              		.loc 1 19 13 is_stmt 0
  24 0010 97000000 		call	_Z8userMainv@plt
  24      E7800000 
  25              	.LVL0:
  20:src/main.cpp  **** }
  26              		.loc 1 20 1
  27 0018 83308100 		ld	ra,8(sp)
  28              		.cfi_restore 1
  29 001c 03340100 		ld	s0,0(sp)
  30              		.cfi_restore 8
  31              		.cfi_def_cfa 2, 16
  32 0020 13010101 		addi	sp,sp,16
  33              		.cfi_def_cfa_offset 0
  34 0024 67800000 		jr	ra
  35              		.cfi_endproc
  36              	.LFE67:
  38              		.section	.rodata.str1.8,"aMS",@progbits,1
GAS LISTING /tmp/ccDDt69y.s 			page 2


  39              		.align	3
  40              	.LC0:
  41 0000 56726174 		.string	"Vratio sam se u main\n"
  41      696F2073 
  41      616D2073 
  41      65207520 
  41      6D61696E 
  42              		.text
  43              		.align	2
  44              		.globl	main
  46              	main:
  47              	.LFB68:
  21:src/main.cpp  **** 
  22:src/main.cpp  **** int main() {
  48              		.loc 1 22 12 is_stmt 1
  49              		.cfi_startproc
  50 0028 130101FE 		addi	sp,sp,-32
  51              		.cfi_def_cfa_offset 32
  52 002c 233C1100 		sd	ra,24(sp)
  53 0030 23388100 		sd	s0,16(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56 0034 13040102 		addi	s0,sp,32
  57              		.cfi_def_cfa 8, 0
  23:src/main.cpp  **** 
  24:src/main.cpp  **** 
  25:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap);
  58              		.loc 1 25 5
  59              		.loc 1 25 19 is_stmt 0
  60 0038 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
  60      83B70700 
  61              	.LVL1:
  62              	.LBB6:
  63              	.LBB7:
  64              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     //pop sstatus.spp and sstasus.spie bits (has to be a non-inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     //push x3..31 registers on stack
  18:src/../h/riscv.hpp ****     static void pushRegisters();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     //pop x3..31 registers on stack
  21:src/../h/riscv.hpp ****     static void popRegisters();
  22:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccDDt69y.s 			page 3


  23:src/../h/riscv.hpp **** 
  24:src/../h/riscv.hpp ****     // read register scause
  25:src/../h/riscv.hpp ****     static uint64 r_scause();
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // write register scause
  28:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // read register sepc
  31:src/../h/riscv.hpp ****     static uint64 r_sepc();
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // write register sepc
  34:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // read register stvec
  37:src/../h/riscv.hpp ****     static uint64 r_stvec();
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // write register stvec
  40:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // read register stval
  43:src/../h/riscv.hpp ****     static uint64 r_stval();
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // write register stval
  46:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     enum BitMaskSip
  49:src/../h/riscv.hpp ****     {
  50:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  51:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  52:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  53:src/../h/riscv.hpp ****     };
  54:src/../h/riscv.hpp **** 
  55:src/../h/riscv.hpp ****     // mask set register sip
  56:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // mask clear register sip
  59:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // read register sip
  62:src/../h/riscv.hpp ****     static uint64 r_sip();
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // write register sip
  65:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     enum BitMaskSstatus
  68:src/../h/riscv.hpp ****     {
  69:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  70:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  71:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  72:src/../h/riscv.hpp ****     };
  73:src/../h/riscv.hpp **** 
  74:src/../h/riscv.hpp ****     // mask set register sstatus
  75:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  76:src/../h/riscv.hpp **** 
  77:src/../h/riscv.hpp ****     // mask clear register sstatus
  78:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  79:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccDDt69y.s 			page 4


  80:src/../h/riscv.hpp ****     // read register sstatus
  81:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // write register sstatus
  84:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     // supervisor trap
  87:src/../h/riscv.hpp ****     static void supervisorTrap();
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp ****     // read a0 register
  90:src/../h/riscv.hpp ****     static uint64 r_a0();
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp ****     // write a0 register
  93:src/../h/riscv.hpp ****     static void w_a0(uint64 val);
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp ****     // read a1 register
  96:src/../h/riscv.hpp ****     static uint64 r_a1();
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp ****     // write a1 register
  99:src/../h/riscv.hpp ****     static void w_a1(uint64 val);
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp ****     // read a2 register
 102:src/../h/riscv.hpp ****     inline static uint64 r_a2();
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp ****     // write a2 register
 105:src/../h/riscv.hpp ****     inline static void w_a2(uint64 val);
 106:src/../h/riscv.hpp **** 
 107:src/../h/riscv.hpp ****     // read a3 register
 108:src/../h/riscv.hpp ****     inline static uint64 r_a3();
 109:src/../h/riscv.hpp **** 
 110:src/../h/riscv.hpp ****     // write a3 register
 111:src/../h/riscv.hpp ****     inline static void w_a3(uint64 val);
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp ****     // read a4 register
 114:src/../h/riscv.hpp ****     inline static uint64 r_a4();
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp ****     // write a4 register
 117:src/../h/riscv.hpp ****     inline static void w_a4(uint64 val);
 118:src/../h/riscv.hpp **** 
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp **** private:
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp ****     // supervisor trap handler
 124:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 125:src/../h/riscv.hpp **** 
 126:src/../h/riscv.hpp **** };
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile scause;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 132:src/../h/riscv.hpp ****     return scause;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 136:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccDDt69y.s 			page 5


 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     uint64 volatile sepc;
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 144:src/../h/riscv.hpp ****     return sepc;
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     uint64 volatile stvec;
 155:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 156:src/../h/riscv.hpp ****     return stvec;
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  65              		.loc 2 161 5 is_stmt 1
  66              		.loc 2 161 69 is_stmt 0
  67              	#APP
  68              	# 161 "src/../h/riscv.hpp" 1
 162              	}
  69              		csrw stvec, a5
  70              	# 0 "" 2
  71              	.LVL2:
  72              	#NO_APP
  73              	.LBE7:
  74              	.LBE6:
  26:src/main.cpp  ****    //Riscv::ms_sstatus(Riscv::SSTATUS_SIE);             //za asihrone
  27:src/main.cpp  **** 
  28:src/main.cpp  ****     /*
  29:src/main.cpp  ****     int n = 16;
  30:src/main.cpp  ****     char** matrix = (char**)(n*sizeof(char*));
  31:src/main.cpp  ****     checkNullptr(matrix);
  32:src/main.cpp  **** 
  33:src/main.cpp  ****     char* c = (char *)mem_alloc(n * sizeof(char));
  34:src/main.cpp  ****     printInteger((uint64) c);
  35:src/main.cpp  ****     __putc('\n');
  36:src/main.cpp  ****     char* d = (char *)mem_alloc(n * sizeof(char));
  37:src/main.cpp  ****     printInteger((uint64) d);
  38:src/main.cpp  ****     __putc('\n');
  39:src/main.cpp  ****     char* e = (char *)mem_alloc(n * sizeof(char));
  40:src/main.cpp  ****     printInteger((uint64) e);
  41:src/main.cpp  **** 
  42:src/main.cpp  ****     __putc('\n');
  43:src/main.cpp  ****     char* f = (char *)mem_alloc(n * sizeof(char));
  44:src/main.cpp  ****     printInteger((uint64) f);
  45:src/main.cpp  ****     __putc('\n');
  46:src/main.cpp  **** 
GAS LISTING /tmp/ccDDt69y.s 			page 6


  47:src/main.cpp  ****     for(int i = 0; i < n; i++) {
  48:src/main.cpp  ****         matrix[i] = (char *)mem_alloc(n * sizeof(char));
  49:src/main.cpp  ****         printInteger((uint64)matrix[i]);
  50:src/main.cpp  ****         checkNullptr(matrix[i]);
  51:src/main.cpp  ****     }
  52:src/main.cpp  **** 
  53:src/main.cpp  ****     for(int i = 0; i < n; i++) {
  54:src/main.cpp  ****         for(int j = 0; j < n; j++) {
  55:src/main.cpp  ****             matrix[i][j] = 'k';
  56:src/main.cpp  ****         }
  57:src/main.cpp  ****     }
  58:src/main.cpp  **** 
  59:src/main.cpp  ****     for(int i = 0; i < n; i++) {
  60:src/main.cpp  ****         for(int j = 0; j < n; j++) {
  61:src/main.cpp  ****             __putc(matrix[i][j]);
  62:src/main.cpp  ****             __putc(' ');
  63:src/main.cpp  ****         }
  64:src/main.cpp  ****         __putc('\n');
  65:src/main.cpp  ****     }
  66:src/main.cpp  **** 
  67:src/main.cpp  **** 
  68:src/main.cpp  ****     for(int i = 0; i < n; i++) {
  69:src/main.cpp  ****         int status = mem_free(matrix[i]);
  70:src/main.cpp  ****         checkStatus(status);
  71:src/main.cpp  ****     }
  72:src/main.cpp  ****     int status = mem_free(matrix);
  73:src/main.cpp  ****     checkStatus(status);
  74:src/main.cpp  **** 
  75:src/main.cpp  ****     */
  76:src/main.cpp  **** 
  77:src/main.cpp  ****     /*
  78:src/main.cpp  ****     printInteger((uint64)HEAP_START_ADDR);
  79:src/main.cpp  ****     printString("\n");
  80:src/main.cpp  ****     MemoryAllocator::init_mem();
  81:src/main.cpp  ****     //MemoryAllocator::mem_alloc(sizeof(int));
  82:src/main.cpp  ****     printInteger((uint64)MemoryAllocator::mem_alloc(sizeof(int)));
  83:src/main.cpp  ****     printString("\n");
  84:src/main.cpp  ****     //printInteger(MemoryAllocator::newHeapStartingAddress);
  85:src/main.cpp  ****     printString("\n");
  86:src/main.cpp  ****     printInteger((uint64)MemoryAllocator::mem_alloc(sizeof(double)));
  87:src/main.cpp  ****     printString("\n");
  88:src/main.cpp  ****     //printInteger(MemoryAllocator::newHeapStartingAddress);
  89:src/main.cpp  ****     printString("\n");
  90:src/main.cpp  ****     printString("\n");
  91:src/main.cpp  **** 
  92:src/main.cpp  ****     void* WTF = MemoryAllocator::mem_alloc(sizeof(int));
  93:src/main.cpp  ****     printInteger((uint64)WTF);
  94:src/main.cpp  ****     MemoryAllocator::mem_free(WTF);
  95:src/main.cpp  **** 
  96:src/main.cpp  ****     printInteger((uint64)MemoryAllocator::mem_alloc(sizeof(double)));
  97:src/main.cpp  ****     printStr("\n");
  98:src/main.cpp  ****     */
  99:src/main.cpp  **** 
 100:src/main.cpp  ****     //Test threads asynchronized
 101:src/main.cpp  ****     /*
 102:src/main.cpp  ****     TCB* threads[5];
 103:src/main.cpp  ****     threads[0] = TCB::createThread(nullptr);
GAS LISTING /tmp/ccDDt69y.s 			page 7


 104:src/main.cpp  ****     TCB::running = threads[0];
 105:src/main.cpp  **** 
 106:src/main.cpp  ****     threads[1] = TCB::createThread(workerBodyA);
 107:src/main.cpp  ****     printString("Thread A created\n");
 108:src/main.cpp  ****     threads[2] = TCB::createThread(workerBodyB);
 109:src/main.cpp  ****     printStr("Thread B created\n");
 110:src/main.cpp  ****     threads[3] = TCB::createThread(workerBodyC);
 111:src/main.cpp  ****     printString("Thread C created\n");
 112:src/main.cpp  ****     threads[4] = TCB::createThread(workerBodyD);
 113:src/main.cpp  ****     printString("Thread D created\n");
 114:src/main.cpp  **** 
 115:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap);
 116:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
 117:src/main.cpp  **** 
 118:src/main.cpp  **** 
 119:src/main.cpp  ****     while(!(threads[1]->isFinished() &&
 120:src/main.cpp  ****             threads[2]->isFinished() &&
 121:src/main.cpp  ****             threads[3]->isFinished() &&
 122:src/main.cpp  ****             threads[4]->isFinished()))
 123:src/main.cpp  ****     {
 124:src/main.cpp  ****         TCB::yield();
 125:src/main.cpp  ****     }
 126:src/main.cpp  **** 
 127:src/main.cpp  ****     for(auto &thread : threads)
 128:src/main.cpp  ****     {
 129:src/main.cpp  ****         delete thread;
 130:src/main.cpp  ****     }
 131:src/main.cpp  **** 
 132:src/main.cpp  **** 
 133:src/main.cpp  ****      */
 134:src/main.cpp  **** 
 135:src/main.cpp  ****     //Test threads synchronized
 136:src/main.cpp  **** 
 137:src/main.cpp  **** 
 138:src/main.cpp  **** /*
 139:src/main.cpp  **** 
 140:src/main.cpp  ****     TCB *thread1;
 141:src/main.cpp  ****     TCB *thread2;
 142:src/main.cpp  ****     TCB *thread3;
 143:src/main.cpp  **** 
 144:src/main.cpp  ****     thread1 = TCB::createThread(nullptr, nullptr);
 145:src/main.cpp  ****     TCB::running = thread1;
 146:src/main.cpp  **** 
 147:src/main.cpp  ****     thread2 = TCB::createThread(workerBodyA, nullptr);
 148:src/main.cpp  ****     printString("Thread A created\n");
 149:src/main.cpp  ****     printString("\nThis is the number of stack: ");
 150:src/main.cpp  ****     printInteger((uint64) thread2->stack);
 151:src/main.cpp  ****     printString("\nThis is the number of sp: ");
 152:src/main.cpp  ****     printInteger(thread2->context.sp);
 153:src/main.cpp  ****     thread3 = TCB::createThread(workerBodyB, nullptr);
 154:src/main.cpp  ****     printStr("Thread B created\n");
 155:src/main.cpp  **** 
 156:src/main.cpp  ****     while (!(thread2->isFinished() &&
 157:src/main.cpp  ****              thread3->isFinished()))
 158:src/main.cpp  ****     {
 159:src/main.cpp  ****         TCB::yield();
 160:src/main.cpp  ****     }
GAS LISTING /tmp/ccDDt69y.s 			page 8


 161:src/main.cpp  **** */
 162:src/main.cpp  **** 
 163:src/main.cpp  ****     /*TCB *threads[3];
 164:src/main.cpp  **** 
 165:src/main.cpp  ****     threads[0] = TCB::createThread(nullptr, nullptr);
 166:src/main.cpp  ****     TCB::running = threads[0];
 167:src/main.cpp  **** 
 168:src/main.cpp  ****     threads[1] = TCB::createThread(workerBodyA, nullptr);
 169:src/main.cpp  ****     printStr("Thread A created\n");
 170:src/main.cpp  **** 
 171:src/main.cpp  ****     threads[2] = TCB::createThread(workerBodyB, nullptr);
 172:src/main.cpp  ****     printString("Thread B created\n");
 173:src/main.cpp  **** 
 174:src/main.cpp  **** 
 175:src/main.cpp  ****     while (!(threads[1]->isFinished() &&
 176:src/main.cpp  ****             threads[2]->isFinished()))
 177:src/main.cpp  ****     {
 178:src/main.cpp  ****         TCB::yield();
 179:src/main.cpp  ****     }
 180:src/main.cpp  **** 
 181:src/main.cpp  ****     for (auto &thread: threads)
 182:src/main.cpp  ****     {
 183:src/main.cpp  ****         delete thread;
 184:src/main.cpp  ****     }*/
 185:src/main.cpp  **** 
 186:src/main.cpp  ****     /*thread_t *t1 = (thread_t*) new (void*);
 187:src/main.cpp  **** 
 188:src/main.cpp  ****     TCB* t2 = TCB::createThread(workerBodyA, nullptr);
 189:src/main.cpp  ****     printInteger(t2->isFinished());
 190:src/main.cpp  **** 
 191:src/main.cpp  **** 
 192:src/main.cpp  ****     int result = thread_create(t1, workerBodyA, nullptr);
 193:src/main.cpp  ****     printInteger(result);
 194:src/main.cpp  **** 
 195:src/main.cpp  ****     uint64* stack = new uint64[DEFAULT_STACK_SIZE];
 196:src/main.cpp  ****     TCB *t3 = TCB::createThread(workerBodyA, stack, nullptr);
 197:src/main.cpp  ****     printInteger(t3->isFinished());
 198:src/main.cpp  ****      */
 199:src/main.cpp  **** 
 200:src/main.cpp  ****     /*
 201:src/main.cpp  ****     //tests for threads!!!
 202:src/main.cpp  **** 
 203:src/main.cpp  ****     printInteger(DEFAULT_STACK_SIZE);
 204:src/main.cpp  **** 
 205:src/main.cpp  ****     thread_t *threads[4];
 206:src/main.cpp  ****     for (int i = 0; i < 4; i++) {
 207:src/main.cpp  ****         //threads[i] = (thread_t*)mem_alloc(sizeof(void*));
 208:src/main.cpp  ****         threads[i] = (thread_t*) new thread_t;
 209:src/main.cpp  ****     }
 210:src/main.cpp  **** 
 211:src/main.cpp  ****     printString("\nshort break");
 212:src/main.cpp  ****     int result_t0 = thread_create(threads[0], nullptr, nullptr);
 213:src/main.cpp  ****     printString("\nThis is the number of result_t0: ");
 214:src/main.cpp  ****     printInteger(result_t0);
 215:src/main.cpp  ****     printString("\n");
 216:src/main.cpp  ****     TCB::running = *threads[0];
 217:src/main.cpp  **** 
GAS LISTING /tmp/ccDDt69y.s 			page 9


 218:src/main.cpp  **** 
 219:src/main.cpp  ****     int result_t1 = thread_create(threads[1], workerBodyA, nullptr);
 220:src/main.cpp  ****     printString("\nThread A created\n");
 221:src/main.cpp  ****     printString("\nThis is the number of result_t1: ");
 222:src/main.cpp  ****     printInteger(result_t1);
 223:src/main.cpp  ****     printStr("\n");
 224:src/main.cpp  **** 
 225:src/main.cpp  ****     int result_t2 = thread_create(threads[2], workerBodyB, nullptr);
 226:src/main.cpp  ****     printString("\nThread B created\n");
 227:src/main.cpp  ****     printString("\nThis is the number of result_t2: ");
 228:src/main.cpp  ****     printInteger(result_t2);
 229:src/main.cpp  ****     printString("\n");
 230:src/main.cpp  **** 
 231:src/main.cpp  ****     int result_t3 = thread_create(threads[3], workerBodyC, nullptr);
 232:src/main.cpp  ****     printString("\nThread C created\n");
 233:src/main.cpp  ****     printString("\nThis is the number of result_t3: ");
 234:src/main.cpp  ****     printInteger(result_t3);
 235:src/main.cpp  ****     printString("\n");
 236:src/main.cpp  **** 
 237:src/main.cpp  ****     //TCB::running = *threads[3];
 238:src/main.cpp  ****     //thread_exit();
 239:src/main.cpp  ****     uint64 cnt = 0;
 240:src/main.cpp  ****     while (!((*threads[1])->isFinished() && (*threads[2])->isFinished() && (*threads[3])->isFinishe
 241:src/main.cpp  ****     {
 242:src/main.cpp  ****         cnt++;
 243:src/main.cpp  ****         //TCB::yield();
 244:src/main.cpp  ****         thread_dispatch();
 245:src/main.cpp  ****         if (cnt == 2) {
 246:src/main.cpp  ****             printString("\n\n\n\n");
 247:src/main.cpp  ****             printInteger(thread_exit());
 248:src/main.cpp  ****             printString("\n\n\n\n");
 249:src/main.cpp  ****         }
 250:src/main.cpp  **** 
 251:src/main.cpp  **** 
 252:src/main.cpp  ****     }
 253:src/main.cpp  **** 
 254:src/main.cpp  **** 
 255:src/main.cpp  ****     for (auto &thread: threads)
 256:src/main.cpp  ****     {
 257:src/main.cpp  ****         printString("Inside deleter area");
 258:src/main.cpp  ****         delete thread;
 259:src/main.cpp  ****     }
 260:src/main.cpp  **** 
 261:src/main.cpp  ****     */
 262:src/main.cpp  **** 
 263:src/main.cpp  ****     /*
 264:src/main.cpp  ****     //tests for semaphores
 265:src/main.cpp  **** 
 266:src/main.cpp  ****     sem_t sem;
 267:src/main.cpp  ****     sem_open(&sem, 1);
 268:src/main.cpp  **** 
 269:src/main.cpp  ****     thread_t *threads[4];
 270:src/main.cpp  ****     for (int i = 0; i < 4; i++) {
 271:src/main.cpp  ****         //threads[i] = (thread_t*)mem_alloc(sizeof(void*));
 272:src/main.cpp  ****         threads[i] = (thread_t*) new thread_t;
 273:src/main.cpp  ****     }
 274:src/main.cpp  **** 
GAS LISTING /tmp/ccDDt69y.s 			page 10


 275:src/main.cpp  ****     printString("\nshort break");
 276:src/main.cpp  ****     int result_t0 = thread_create(threads[0], nullptr, sem);
 277:src/main.cpp  ****     printString("\nThis is the number of result_t0: ");
 278:src/main.cpp  ****     printInteger(result_t0);
 279:src/main.cpp  ****     printStr("\n");
 280:src/main.cpp  ****     TCB::running = *threads[0];
 281:src/main.cpp  **** 
 282:src/main.cpp  **** 
 283:src/main.cpp  ****     int result_t1 = thread_create(threads[1], workerBodyA, sem);
 284:src/main.cpp  ****     printString("\nThread A created\n");
 285:src/main.cpp  ****     printString("\nThis is the number of result_t1: ");
 286:src/main.cpp  ****     printInteger(result_t1);
 287:src/main.cpp  ****     printString("\n");
 288:src/main.cpp  **** 
 289:src/main.cpp  ****     int result_t2 = thread_create(threads[2], workerBodyB, sem);
 290:src/main.cpp  ****     printString("\nThread B created\n");
 291:src/main.cpp  ****     printString("\nThis is the number of result_t2: ");
 292:src/main.cpp  ****     printInteger(result_t2);
 293:src/main.cpp  ****     printString("\n");
 294:src/main.cpp  **** 
 295:src/main.cpp  ****     int result_t3 = thread_create(threads[3], workerBodyC, sem);
 296:src/main.cpp  ****     printString("\nThread C created\n");
 297:src/main.cpp  ****     printString("\nThis is the number of result_t3: ");
 298:src/main.cpp  ****     printInteger(result_t3);
 299:src/main.cpp  ****     printString("\n");
 300:src/main.cpp  **** 
 301:src/main.cpp  ****     //TCB::running = *threads[3];
 302:src/main.cpp  ****     //thread_exit();
 303:src/main.cpp  ****     uint64 cnt = 0;
 304:src/main.cpp  ****     while (!((*threads[1])->isFinished() && (*threads[2])->isFinished() && (*threads[3])->isFinishe
 305:src/main.cpp  ****     {
 306:src/main.cpp  ****         cnt++;
 307:src/main.cpp  ****         //TCB::yield();
 308:src/main.cpp  ****         thread_dispatch();
 309:src/main.cpp  **** 
 310:src/main.cpp  **** 
 311:src/main.cpp  **** 
 312:src/main.cpp  ****     }
 313:src/main.cpp  **** 
 314:src/main.cpp  **** 
 315:src/main.cpp  **** 
 316:src/main.cpp  **** 
 317:src/main.cpp  **** 
 318:src/main.cpp  **** 
 319:src/main.cpp  ****     for (auto &thread: threads)
 320:src/main.cpp  ****     {
 321:src/main.cpp  ****         printString("Inside deleter area");
 322:src/main.cpp  ****         delete thread;
 323:src/main.cpp  ****     }
 324:src/main.cpp  **** 
 325:src/main.cpp  **** 
 326:src/main.cpp  **** 
 327:src/main.cpp  ****     */
 328:src/main.cpp  **** /*
 329:src/main.cpp  ****     printString("Unesite broj testa? [1-7]\n");
 330:src/main.cpp  ****     __putc('d');
 331:src/main.cpp  ****     putc('l');
GAS LISTING /tmp/ccDDt69y.s 			page 11


 332:src/main.cpp  ****     putc('\n');
 333:src/main.cpp  ****     putc('k');
 334:src/main.cpp  ****     while(1) {
 335:src/main.cpp  ****         char test_char = __getc();
 336:src/main.cpp  ****         __putc(test_char + 30);
 337:src/main.cpp  ****     }*/
 338:src/main.cpp  **** 
 339:src/main.cpp  **** 
 340:src/main.cpp  **** 
 341:src/main.cpp  ****     TCB *threads[2];
  75              		.loc 1 341 5 is_stmt 1
 342:src/main.cpp  ****     threads[0] = TCB::createThread(nullptr,nullptr);
  76              		.loc 1 342 5
  77              		.loc 1 342 35 is_stmt 0
  78 0044 93050000 		li	a1,0
  79 0048 13050000 		li	a0,0
  80 004c 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
  80      E7800000 
  81              	.LVL3:
  82              		.loc 1 342 16
  83 0054 2330A4FE 		sd	a0,-32(s0)
 343:src/main.cpp  ****     TCB::running = threads[0];
  84              		.loc 1 343 5 is_stmt 1
  85              		.loc 1 343 18 is_stmt 0
  86 0058 97070000 		la	a5,_ZN3TCB7runningE
  86      83B70700 
  87 0060 23B0A700 		sd	a0,0(a5)
 344:src/main.cpp  **** 
 345:src/main.cpp  **** 
 346:src/main.cpp  ****     thread_create(&threads[1], dummyFunction, nullptr);
  88              		.loc 1 346 5 is_stmt 1
  89              		.loc 1 346 18 is_stmt 0
  90 0064 13060000 		li	a2,0
  91 0068 97050000 		lla	a1,_Z13dummyFunctionPv
  91      93850500 
  92 0070 130584FE 		addi	a0,s0,-24
  93 0074 97000000 		call	_Z13thread_createPP3TCBPFvPvES2_@plt
  93      E7800000 
  94              	.LVL4:
  95              	.L5:
 347:src/main.cpp  **** 
 348:src/main.cpp  ****     //thread_create(&threads[1], reinterpret_cast<void (*)(void *)>(userMain), nullptr);
 349:src/main.cpp  **** 
 350:src/main.cpp  ****     while(!threads[1]->isFinished()) {
  96              		.loc 1 350 5 is_stmt 1
  97              		.loc 1 350 11
  98              		.loc 1 350 21 is_stmt 0
  99 007c 833784FE 		ld	a5,-24(s0)
 100              	.LVL5:
 101              	.LBB8:
 102              	.LBB9:
 103              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
GAS LISTING /tmp/ccDDt69y.s 			page 12


   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** #include "MemoryAllocator.hpp"
  11:src/../h/tcb.hpp **** 
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp **** // Thread Control Block
  14:src/../h/tcb.hpp **** class TCB
  15:src/../h/tcb.hpp **** {
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp **** 
  18:src/../h/tcb.hpp ****     void *operator new(size_t n)
  19:src/../h/tcb.hpp ****     {
  20:src/../h/tcb.hpp ****         //return __mem_alloc(n);
  21:src/../h/tcb.hpp ****         //printInteger(n);
  22:src/../h/tcb.hpp ****         return MemoryAllocator::mem_alloc(n);
  23:src/../h/tcb.hpp **** 
  24:src/../h/tcb.hpp ****     }
  25:src/../h/tcb.hpp **** 
  26:src/../h/tcb.hpp ****     void *operator new[](size_t n)
  27:src/../h/tcb.hpp ****     {
  28:src/../h/tcb.hpp ****         //return __mem_alloc(n);
  29:src/../h/tcb.hpp ****         //printStr("\nSize passed to the new operator");
  30:src/../h/tcb.hpp ****         //printInteger(n);
  31:src/../h/tcb.hpp ****         return MemoryAllocator::mem_alloc(n);
  32:src/../h/tcb.hpp **** 
  33:src/../h/tcb.hpp ****     }
  34:src/../h/tcb.hpp ****     void operator delete(void *p)
  35:src/../h/tcb.hpp ****     {
  36:src/../h/tcb.hpp ****        // mem_free(p);
  37:src/../h/tcb.hpp ****         MemoryAllocator::mem_free(p);
  38:src/../h/tcb.hpp ****     }
  39:src/../h/tcb.hpp **** 
  40:src/../h/tcb.hpp ****     void operator delete[](void *p)
  41:src/../h/tcb.hpp ****     {
  42:src/../h/tcb.hpp ****         //mem_free(p);
  43:src/../h/tcb.hpp ****         MemoryAllocator::mem_free(p);
  44:src/../h/tcb.hpp ****     }
  45:src/../h/tcb.hpp **** 
  46:src/../h/tcb.hpp **** 
  47:src/../h/tcb.hpp **** public:
  48:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  49:src/../h/tcb.hpp **** 
  50:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
 104              		.loc 3 50 31 is_stmt 1
 105              		.loc 3 50 38 is_stmt 0
 106 0080 83C78702 		lbu	a5,40(a5)
 107              	.LVL6:
 108              	.LBE9:
 109              	.LBE8:
 110              		.loc 1 350 11
 111 0084 63980700 		bnez	a5,.L4
 351:src/main.cpp  ****         //printString("\nWTF\n");
 352:src/main.cpp  ****         thread_dispatch();
 112              		.loc 1 352 9 is_stmt 1
 113              		.loc 1 352 24 is_stmt 0
GAS LISTING /tmp/ccDDt69y.s 			page 13


 114 0088 97000000 		call	_Z15thread_dispatchv@plt
 114      E7800000 
 115              	.LVL7:
 116 0090 6FF0DFFE 		j	.L5
 117              	.L4:
 353:src/main.cpp  **** 
 354:src/main.cpp  ****     }
 355:src/main.cpp  **** 
 356:src/main.cpp  ****     printString("Vratio sam se u main\n");
 118              		.loc 1 356 5 is_stmt 1
 119              		.loc 1 356 16 is_stmt 0
 120 0094 17050000 		lla	a0,.LC0
 120      13050500 
 121 009c 97000000 		call	_Z11printStringPKc@plt
 121      E7800000 
 122              	.LVL8:
 357:src/main.cpp  **** 
 358:src/main.cpp  ****     return 0;
 123              		.loc 1 358 5 is_stmt 1
 359:src/main.cpp  **** 
 360:src/main.cpp  ****     printString("\nFinished\n");
 361:src/main.cpp  **** 
 362:src/main.cpp  ****     return 0;
 363:src/main.cpp  **** }
 124              		.loc 1 363 1 is_stmt 0
 125 00a4 13050000 		li	a0,0
 126 00a8 83308101 		ld	ra,24(sp)
 127              		.cfi_restore 1
 128 00ac 03340101 		ld	s0,16(sp)
 129              		.cfi_restore 8
 130              		.cfi_def_cfa 2, 32
 131 00b0 13010102 		addi	sp,sp,32
 132              		.cfi_def_cfa_offset 0
 133 00b4 67800000 		jr	ra
 134              		.cfi_endproc
 135              	.LFE68:
 137              	.Letext0:
 138              		.file 4 "src/../h/../lib/hw.h"
 139              		.file 5 "src/../test/../h/syscall_c.hpp"
 140              		.file 6 "src/../test/printing.hpp"
GAS LISTING /tmp/ccDDt69y.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccDDt69y.s:9      .text:0000000000000000 _Z13dummyFunctionPv
     /tmp/ccDDt69y.s:13     .text:0000000000000000 .L0 
     /tmp/ccDDt69y.s:14     .text:0000000000000000 .L0 
     /tmp/ccDDt69y.s:15     .text:0000000000000004 .L0 
     /tmp/ccDDt69y.s:18     .text:000000000000000c .L0 
     /tmp/ccDDt69y.s:19     .text:000000000000000c .L0 
     /tmp/ccDDt69y.s:21     .text:0000000000000010 .L0 
     /tmp/ccDDt69y.s:23     .text:0000000000000010 .L0 
     /tmp/ccDDt69y.s:24     .text:0000000000000010 .L0 
     /tmp/ccDDt69y.s:27     .text:0000000000000018 .L0 
     /tmp/ccDDt69y.s:28     .text:000000000000001c .L0 
     /tmp/ccDDt69y.s:30     .text:0000000000000020 .L0 
     /tmp/ccDDt69y.s:31     .text:0000000000000020 .L0 
     /tmp/ccDDt69y.s:33     .text:0000000000000024 .L0 
     /tmp/ccDDt69y.s:35     .text:0000000000000028 .L0 
     /tmp/ccDDt69y.s:46     .text:0000000000000028 main
     /tmp/ccDDt69y.s:49     .text:0000000000000028 .L0 
     /tmp/ccDDt69y.s:50     .text:0000000000000028 .L0 
     /tmp/ccDDt69y.s:51     .text:000000000000002c .L0 
     /tmp/ccDDt69y.s:54     .text:0000000000000034 .L0 
     /tmp/ccDDt69y.s:55     .text:0000000000000034 .L0 
     /tmp/ccDDt69y.s:57     .text:0000000000000038 .L0 
     /tmp/ccDDt69y.s:59     .text:0000000000000038 .L0 
     /tmp/ccDDt69y.s:60     .text:0000000000000038 .L0 
     /tmp/ccDDt69y.s:66     .text:0000000000000040 .L0 
  src/../h/riscv.hpp:161    .text:0000000000000040 .L0 
     /tmp/ccDDt69y.s:76     .text:0000000000000044 .L0 
     /tmp/ccDDt69y.s:77     .text:0000000000000044 .L0 
     /tmp/ccDDt69y.s:78     .text:0000000000000044 .L0 
     /tmp/ccDDt69y.s:83     .text:0000000000000054 .L0 
     /tmp/ccDDt69y.s:85     .text:0000000000000058 .L0 
     /tmp/ccDDt69y.s:86     .text:0000000000000058 .L0 
     /tmp/ccDDt69y.s:89     .text:0000000000000064 .L0 
     /tmp/ccDDt69y.s:90     .text:0000000000000064 .L0 
     /tmp/ccDDt69y.s:97     .text:000000000000007c .L0 
     /tmp/ccDDt69y.s:98     .text:000000000000007c .L0 
     /tmp/ccDDt69y.s:99     .text:000000000000007c .L0 
     /tmp/ccDDt69y.s:105    .text:0000000000000080 .L0 
     /tmp/ccDDt69y.s:106    .text:0000000000000080 .L0 
     /tmp/ccDDt69y.s:111    .text:0000000000000084 .L0 
     /tmp/ccDDt69y.s:113    .text:0000000000000088 .L0 
     /tmp/ccDDt69y.s:114    .text:0000000000000088 .L0 
     /tmp/ccDDt69y.s:119    .text:0000000000000094 .L0 
     /tmp/ccDDt69y.s:120    .text:0000000000000094 .L0 
     /tmp/ccDDt69y.s:124    .text:00000000000000a4 .L0 
     /tmp/ccDDt69y.s:125    .text:00000000000000a4 .L0 
     /tmp/ccDDt69y.s:127    .text:00000000000000ac .L0 
     /tmp/ccDDt69y.s:129    .text:00000000000000b0 .L0 
     /tmp/ccDDt69y.s:130    .text:00000000000000b0 .L0 
     /tmp/ccDDt69y.s:132    .text:00000000000000b4 .L0 
     /tmp/ccDDt69y.s:134    .text:00000000000000b8 .L0 
     /tmp/ccDDt69y.s:141    .text:00000000000000b8 .L0 
     /tmp/ccDDt69y.s:60     .text:0000000000000038 .L0 
     /tmp/ccDDt69y.s:86     .text:0000000000000058 .L0 
     /tmp/ccDDt69y.s:91     .text:0000000000000068 .L0 
GAS LISTING /tmp/ccDDt69y.s 			page 15


     /tmp/ccDDt69y.s:40     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccDDt69y.s:120    .text:0000000000000094 .L0 
     /tmp/ccDDt69y.s:117    .text:0000000000000094 .L4
     /tmp/ccDDt69y.s:95     .text:000000000000007c .L5
     /tmp/ccDDt69y.s:1148   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccDDt69y.s:2299   .debug_str:00000000000006f8 .LASF140
     /tmp/ccDDt69y.s:2121   .debug_str:0000000000000201 .LASF141
     /tmp/ccDDt69y.s:2133   .debug_str:0000000000000265 .LASF142
     /tmp/ccDDt69y.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccDDt69y.s:137    .text:00000000000000b8 .Letext0
     /tmp/ccDDt69y.s:2055   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccDDt69y.s:2149   .debug_str:00000000000002fb .LASF0
     /tmp/ccDDt69y.s:2177   .debug_str:00000000000003b0 .LASF1
     /tmp/ccDDt69y.s:2245   .debug_str:000000000000058f .LASF2
     /tmp/ccDDt69y.s:2115   .debug_str:00000000000001d6 .LASF3
     /tmp/ccDDt69y.s:2255   .debug_str:00000000000005d7 .LASF4
     /tmp/ccDDt69y.s:2157   .debug_str:000000000000032f .LASF5
     /tmp/ccDDt69y.s:2069   .debug_str:000000000000006b .LASF6
     /tmp/ccDDt69y.s:2219   .debug_str:00000000000004d1 .LASF7
     /tmp/ccDDt69y.s:2173   .debug_str:000000000000038a .LASF8
     /tmp/ccDDt69y.s:2131   .debug_str:0000000000000255 .LASF9
     /tmp/ccDDt69y.s:2139   .debug_str:00000000000002ab .LASF10
     /tmp/ccDDt69y.s:2091   .debug_str:000000000000011e .LASF11
     /tmp/ccDDt69y.s:2119   .debug_str:00000000000001f2 .LASF12
     /tmp/ccDDt69y.s:2097   .debug_str:000000000000014c .LASF13
     /tmp/ccDDt69y.s:2089   .debug_str:000000000000010e .LASF14
     /tmp/ccDDt69y.s:2283   .debug_str:00000000000006a7 .LASF15
     /tmp/ccDDt69y.s:2111   .debug_str:00000000000001a5 .LASF16
     /tmp/ccDDt69y.s:2273   .debug_str:0000000000000656 .LASF17
     /tmp/ccDDt69y.s:2287   .debug_str:00000000000006bc .LASF143
     /tmp/ccDDt69y.s:2351   .debug_str:0000000000000915 .LASF18
     /tmp/ccDDt69y.s:2135   .debug_str:0000000000000283 .LASF20
     /tmp/ccDDt69y.s:2085   .debug_str:00000000000000e9 .LASF19
     /tmp/ccDDt69y.s:2129   .debug_str:0000000000000249 .LASF21
     /tmp/ccDDt69y.s:2061   .debug_str:0000000000000016 .LASF22
     /tmp/ccDDt69y.s:2193   .debug_str:0000000000000410 .LASF24
     /tmp/ccDDt69y.s:2271   .debug_str:0000000000000643 .LASF23
     /tmp/ccDDt69y.s:2247   .debug_str:000000000000059d .LASF25
     /tmp/ccDDt69y.s:2257   .debug_str:00000000000005de .LASF26
     /tmp/ccDDt69y.s:2067   .debug_str:000000000000005f .LASF28
     /tmp/ccDDt69y.s:2289   .debug_str:00000000000006c4 .LASF30
     /tmp/ccDDt69y.s:2199   .debug_str:0000000000000441 .LASF32
     /tmp/ccDDt69y.s:2079   .debug_str:00000000000000ca .LASF27
     /tmp/ccDDt69y.s:2311   .debug_str:0000000000000804 .LASF29
     /tmp/ccDDt69y.s:2249   .debug_str:00000000000005aa .LASF31
     /tmp/ccDDt69y.s:2087   .debug_str:00000000000000f9 .LASF33
     /tmp/ccDDt69y.s:2291   .debug_str:00000000000006cf .LASF34
     /tmp/ccDDt69y.s:2117   .debug_str:00000000000001dc .LASF35
     /tmp/ccDDt69y.s:2181   .debug_str:00000000000003c9 .LASF36
     /tmp/ccDDt69y.s:2319   .debug_str:0000000000000841 .LASF37
     /tmp/ccDDt69y.s:2239   .debug_str:0000000000000570 .LASF38
     /tmp/ccDDt69y.s:2269   .debug_str:000000000000062d .LASF39
     /tmp/ccDDt69y.s:2281   .debug_str:000000000000069a .LASF40
     /tmp/ccDDt69y.s:2125   .debug_str:0000000000000222 .LASF41
     /tmp/ccDDt69y.s:2213   .debug_str:00000000000004aa .LASF144
     /tmp/ccDDt69y.s:2321   .debug_str:000000000000085a .LASF42
     /tmp/ccDDt69y.s:2191   .debug_str:0000000000000405 .LASF69
GAS LISTING /tmp/ccDDt69y.s 			page 16


     /tmp/ccDDt69y.s:2075   .debug_str:0000000000000092 .LASF71
     /tmp/ccDDt69y.s:2179   .debug_str:00000000000003c3 .LASF61
     /tmp/ccDDt69y.s:2301   .debug_str:00000000000007bc .LASF63
     /tmp/ccDDt69y.s:2297   .debug_str:00000000000006f0 .LASF145
     /tmp/ccDDt69y.s:2095   .debug_str:0000000000000140 .LASF146
     /tmp/ccDDt69y.s:2227   .debug_str:0000000000000516 .LASF43
     /tmp/ccDDt69y.s:2107   .debug_str:000000000000018a .LASF44
     /tmp/ccDDt69y.s:2059   .debug_str:0000000000000011 .LASF45
     /tmp/ccDDt69y.s:2347   .debug_str:00000000000008f7 .LASF46
     /tmp/ccDDt69y.s:2307   .debug_str:00000000000007e7 .LASF47
     /tmp/ccDDt69y.s:2303   .debug_str:00000000000007cc .LASF48
     /tmp/ccDDt69y.s:2285   .debug_str:00000000000006b3 .LASF49
     /tmp/ccDDt69y.s:2205   .debug_str:0000000000000467 .LASF50
     /tmp/ccDDt69y.s:2083   .debug_str:00000000000000db .LASF53
     /tmp/ccDDt69y.s:2183   .debug_str:00000000000003d6 .LASF55
     /tmp/ccDDt69y.s:2099   .debug_str:000000000000015c .LASF51
     /tmp/ccDDt69y.s:2065   .debug_str:0000000000000037 .LASF52
     /tmp/ccDDt69y.s:2105   .debug_str:0000000000000181 .LASF54
     /tmp/ccDDt69y.s:2169   .debug_str:0000000000000366 .LASF56
     /tmp/ccDDt69y.s:2265   .debug_str:000000000000060b .LASF147
     /tmp/ccDDt69y.s:2253   .debug_str:00000000000005cc .LASF57
     /tmp/ccDDt69y.s:2341   .debug_str:00000000000008ca .LASF58
     /tmp/ccDDt69y.s:2237   .debug_str:000000000000056b .LASF59
     /tmp/ccDDt69y.s:2325   .debug_str:0000000000000884 .LASF60
     /tmp/ccDDt69y.s:2141   .debug_str:00000000000002b9 .LASF62
     /tmp/ccDDt69y.s:2145   .debug_str:00000000000002d6 .LASF64
     /tmp/ccDDt69y.s:2263   .debug_str:00000000000005fd .LASF65
     /tmp/ccDDt69y.s:2113   .debug_str:00000000000001bb .LASF66
     /tmp/ccDDt69y.s:2151   .debug_str:0000000000000308 .LASF67
     /tmp/ccDDt69y.s:2337   .debug_str:00000000000008a8 .LASF68
     /tmp/ccDDt69y.s:2315   .debug_str:000000000000082a .LASF70
     /tmp/ccDDt69y.s:2309   .debug_str:00000000000007ef .LASF72
     /tmp/ccDDt69y.s:2241   .debug_str:000000000000057b .LASF73
     /tmp/ccDDt69y.s:2207   .debug_str:000000000000046f .LASF74
     /tmp/ccDDt69y.s:2229   .debug_str:000000000000052d .LASF75
     /tmp/ccDDt69y.s:2231   .debug_str:0000000000000534 .LASF76
     /tmp/ccDDt69y.s:2203   .debug_str:0000000000000460 .LASF77
     /tmp/ccDDt69y.s:2175   .debug_str:000000000000039d .LASF78
     /tmp/ccDDt69y.s:2339   .debug_str:00000000000008c2 .LASF79
     /tmp/ccDDt69y.s:2279   .debug_str:0000000000000686 .LASF80
     /tmp/ccDDt69y.s:2201   .debug_str:0000000000000458 .LASF81
     /tmp/ccDDt69y.s:2123   .debug_str:000000000000020e .LASF82
     /tmp/ccDDt69y.s:2185   .debug_str:00000000000003ef .LASF83
     /tmp/ccDDt69y.s:2233   .debug_str:0000000000000547 .LASF84
     /tmp/ccDDt69y.s:2353   .debug_str:0000000000000922 .LASF85
     /tmp/ccDDt69y.s:2155   .debug_str:000000000000031b .LASF86
     /tmp/ccDDt69y.s:2277   .debug_str:000000000000067f .LASF87
     /tmp/ccDDt69y.s:2259   .debug_str:00000000000005e3 .LASF88
     /tmp/ccDDt69y.s:2261   .debug_str:00000000000005f6 .LASF89
     /tmp/ccDDt69y.s:2093   .debug_str:000000000000012d .LASF90
     /tmp/ccDDt69y.s:2109   .debug_str:000000000000019f .LASF91
     /tmp/ccDDt69y.s:2143   .debug_str:00000000000002c4 .LASF92
     /tmp/ccDDt69y.s:2153   .debug_str:0000000000000315 .LASF93
     /tmp/ccDDt69y.s:2103   .debug_str:000000000000016f .LASF94
     /tmp/ccDDt69y.s:2071   .debug_str:0000000000000072 .LASF95
     /tmp/ccDDt69y.s:2251   .debug_str:00000000000005b4 .LASF96
     /tmp/ccDDt69y.s:2243   .debug_str:0000000000000584 .LASF97
GAS LISTING /tmp/ccDDt69y.s 			page 17


     /tmp/ccDDt69y.s:2349   .debug_str:00000000000008fd .LASF98
     /tmp/ccDDt69y.s:2327   .debug_str:000000000000088a .LASF99
     /tmp/ccDDt69y.s:2343   .debug_str:00000000000008d5 .LASF100
     /tmp/ccDDt69y.s:2323   .debug_str:000000000000087a .LASF101
     /tmp/ccDDt69y.s:2197   .debug_str:000000000000042b .LASF102
     /tmp/ccDDt69y.s:2313   .debug_str:000000000000081b .LASF103
     /tmp/ccDDt69y.s:2137   .debug_str:000000000000028f .LASF104
     /tmp/ccDDt69y.s:2329   .debug_str:0000000000000894 .LASF105
     /tmp/ccDDt69y.s:2215   .debug_str:00000000000004af .LASF106
     /tmp/ccDDt69y.s:2161   .debug_str:0000000000000352 .LASF107
     /tmp/ccDDt69y.s:2295   .debug_str:00000000000006df .LASF108
     /tmp/ccDDt69y.s:2331   .debug_str:0000000000000899 .LASF109
     /tmp/ccDDt69y.s:2159   .debug_str:0000000000000341 .LASF110
     /tmp/ccDDt69y.s:2163   .debug_str:0000000000000357 .LASF111
     /tmp/ccDDt69y.s:2217   .debug_str:00000000000004c0 .LASF112
     /tmp/ccDDt69y.s:2333   .debug_str:000000000000089e .LASF113
     /tmp/ccDDt69y.s:2063   .debug_str:0000000000000026 .LASF114
     /tmp/ccDDt69y.s:2165   .debug_str:000000000000035c .LASF115
     /tmp/ccDDt69y.s:2171   .debug_str:0000000000000379 .LASF116
     /tmp/ccDDt69y.s:2335   .debug_str:00000000000008a3 .LASF117
     /tmp/ccDDt69y.s:2355   .debug_str:000000000000092a .LASF118
     /tmp/ccDDt69y.s:2167   .debug_str:0000000000000361 .LASF119
     /tmp/ccDDt69y.s:2267   .debug_str:000000000000061c .LASF120
     /tmp/ccDDt69y.s:2209   .debug_str:0000000000000484 .LASF121
     /tmp/ccDDt69y.s:2305   .debug_str:00000000000007d6 .LASF122
     /tmp/ccDDt69y.s:2081   .debug_str:00000000000000d6 .LASF123
     /tmp/ccDDt69y.s:2057   .debug_str:0000000000000000 .LASF124
     /tmp/ccDDt69y.s:2221   .debug_str:00000000000004e4 .LASF125
     /tmp/ccDDt69y.s:2077   .debug_str:00000000000000a8 .LASF126
     /tmp/ccDDt69y.s:2293   .debug_str:00000000000006da .LASF127
     /tmp/ccDDt69y.s:2127   .debug_str:0000000000000244 .LASF128
     /tmp/ccDDt69y.s:47     .text:0000000000000028 .LFB68
     /tmp/ccDDt69y.s:135    .text:00000000000000b8 .LFE68
     /tmp/ccDDt69y.s:2189   .debug_str:00000000000003fd .LASF129
     /tmp/ccDDt69y.s:62     .text:0000000000000040 .LBB6
     /tmp/ccDDt69y.s:74     .text:0000000000000044 .LBE6
     /tmp/ccDDt69y.s:101    .text:0000000000000080 .LBB8
     /tmp/ccDDt69y.s:109    .text:0000000000000084 .LBE8
     /tmp/ccDDt69y.s:2035   .debug_loc:0000000000000000 .LLST0
     /tmp/ccDDt69y.s:81     .text:0000000000000054 .LVL3
     /tmp/ccDDt69y.s:94     .text:000000000000007c .LVL4
     /tmp/ccDDt69y.s:115    .text:0000000000000090 .LVL7
     /tmp/ccDDt69y.s:122    .text:00000000000000a4 .LVL8
     /tmp/ccDDt69y.s:2195   .debug_str:000000000000041d .LASF130
     /tmp/ccDDt69y.s:2225   .debug_str:0000000000000502 .LASF131
     /tmp/ccDDt69y.s:10     .text:0000000000000000 .LFB67
     /tmp/ccDDt69y.s:36     .text:0000000000000028 .LFE67
     /tmp/ccDDt69y.s:25     .text:0000000000000018 .LVL0
     /tmp/ccDDt69y.s:2187   .debug_str:00000000000003f7 .LASF148
     /tmp/ccDDt69y.s:2101   .debug_str:000000000000016a .LASF149
     /tmp/ccDDt69y.s:2211   .debug_str:0000000000000489 .LASF132
     /tmp/ccDDt69y.s:2317   .debug_str:0000000000000833 .LASF134
     /tmp/ccDDt69y.s:2073   .debug_str:000000000000007d .LASF133
     /tmp/ccDDt69y.s:2235   .debug_str:000000000000055b .LASF135
     /tmp/ccDDt69y.s:2275   .debug_str:000000000000066c .LASF136
     /tmp/ccDDt69y.s:2345   .debug_str:00000000000008eb .LASF137
     /tmp/ccDDt69y.s:2147   .debug_str:00000000000002ee .LASF138
GAS LISTING /tmp/ccDDt69y.s 			page 18


     /tmp/ccDDt69y.s:2223   .debug_str:00000000000004f9 .LASF139
     /tmp/ccDDt69y.s:100    .text:0000000000000080 .LVL5
     /tmp/ccDDt69y.s:107    .text:0000000000000084 .LVL6
     /tmp/ccDDt69y.s:142    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z8userMainv
_ZN5Riscv14supervisorTrapEv
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB7runningE
_Z13thread_createPP3TCBPFvPvES2_
_Z15thread_dispatchv
_Z11printStringPKc
